// Package models contains the types for schema 'feedbacks'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// MStatus represents a row from 'feedbacks.m_status'.
type MStatus struct {
	StatusID   int    `json:"status_id"`   // status_id
	StatusName string `json:"status_name"` // status_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MStatus exists in the database.
func (ms *MStatus) Exists() bool {
	return ms._exists
}

// Deleted provides information if the MStatus has been deleted from the database.
func (ms *MStatus) Deleted() bool {
	return ms._deleted
}

// Insert inserts the MStatus to the database.
func (ms *MStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ms._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO feedbacks.m_status (` +
		`status_name` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, ms.StatusName)
	res, err := db.Exec(sqlstr, ms.StatusName)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ms.StatusID = int(id)
	ms._exists = true

	return nil
}

// Update updates the MStatus in the database.
func (ms *MStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ms._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ms._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE feedbacks.m_status SET ` +
		`status_name = ?` +
		` WHERE status_id = ?`

	// run query
	XOLog(sqlstr, ms.StatusName, ms.StatusID)
	_, err = db.Exec(sqlstr, ms.StatusName, ms.StatusID)
	return err
}

// Save saves the MStatus to the database.
func (ms *MStatus) Save(db XODB) error {
	if ms.Exists() {
		return ms.Update(db)
	}

	return ms.Insert(db)
}

// Delete deletes the MStatus from the database.
func (ms *MStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ms._exists {
		return nil
	}

	// if deleted, bail
	if ms._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM feedbacks.m_status WHERE status_id = ?`

	// run query
	XOLog(sqlstr, ms.StatusID)
	_, err = db.Exec(sqlstr, ms.StatusID)
	if err != nil {
		return err
	}

	// set deleted
	ms._deleted = true

	return nil
}

// MStatusByStatusID retrieves a row from 'feedbacks.m_status' as a MStatus.
//
// Generated from index 'm_status_status_id_pkey'.
func MStatusByStatusID(db XODB, statusID int) (*MStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`status_id, status_name ` +
		`FROM feedbacks.m_status ` +
		`WHERE status_id = ?`

	// run query
	XOLog(sqlstr, statusID)
	ms := MStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, statusID).Scan(&ms.StatusID, &ms.StatusName)
	if err != nil {
		return nil, err
	}

	return &ms, nil
}
